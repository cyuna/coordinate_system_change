  #include <iostream>
  #include <stdio.h>
  #include <pcl/io/pcd_io.h>
  #include <pcl/point_cloud.h>
  #include <pcl/filters/passthrough.h>
  #include <limits>
  #include <algorithm>
  #include <Eigen/Dense>

pcl::PointCloud<pcl::PointXYZINormal> getLIDAROneScan(pcl::PointCloud<pcl::PointXYZINormal> inCld)

{

  // ndt_pose이 포함되어있는 lidar onescan point cloud 반환 (pointmap.pcd를 for문으로 반복하여 여러개의 onescan들을 얻을예정)

}

pcl::PointXYZINormal  getNDTPose(pcl::PointCloud<pcl::PointXYZINormal> rawCld)
{  
    // lidar onescan point cloud로부터 ndt_pose값 반환 (getLIDAROneScan에서 얻은 one scan에서 ndt_pose값만 추출) 
    pcl::PointXYZINormal ndt_;
    for(int i = 0; i < rawCld.points.size();i++){
            if (rawCld.points[i].curvature != 0 )
              {   count ++;     
                  ndt_ = rawCld.points[i];
                  return ndt_;
              }
            }

    ndt_.curvature = 0;
    return ndt_;
}

Eigen::MatrixXf getTransMat(pcl::PointXYZINormal ndt_pose)
{   
//   변환행렬 반환(맵좌표계->라이다좌표계 변환행렬, 인자 순서를 바꾸면 라이다좌표계-> 맵좌표계 변환행렬 반환가능하게)
//(getLIDAROneScan으로부터 얻은 lidar onescan point cloud의 모든 point들의 좌표계 변환을 위해 변환행렬 추출)
    Eigen::AngleAxisf init_rotation_x(-ndt_pose.intensity, Eigen::Vector3f::UnitX());
    Eigen::AngleAxisf init_rotation_y(-ndt_pose.normal_x, Eigen::Vector3f::UnitY());
    Eigen::AngleAxisf init_rotation_z(-ndt_pose.curvature, Eigen::Vector3f::UnitZ());
    Eigen::Translation3f init_translation(-ndt_pose.x, -ndt_pose.y, -ndt_pose.z);
    Eigen::MatrixXf transform = (  init_rotation_x  * init_rotation_y  * init_rotation_z *init_translation ).matrix();
    return transform;
}

pcl::PointCloud<pcl::PointXYZINormal> transformPoint(pcl::PointCloud<pcl::PointXYZINormal> rawCld , Eigen::MatrixXf trans_mat)
{
  // 좌표변환된 point 반환 (getLIDAROneScan으로부터 얻은 lidar onescan point cloud의 모든 point들을 getTransMat에서 얻은 변환행렬로 transform적용)
  pcl::PointCloud<pcl::PointXYZINormal> resultCld;
  for(int j = 0; j <  rawCld.size();j++)
    { 
        Eigen::MatrixXf matrix_input(4,1);
        Eigen::MatrixXf matrix_output(4,1);
        matrix_input(0,0) = rawCld.points[j].x;
        matrix_input(1,0) = rawCld.points[j].y;
        matrix_input(2,0) = rawCld.points[j].z;
        matrix_input(3,0) = 1;

        matrix_output = trans_mat * matrix_input;

        Eigen::MatrixXf trans_mat_2(4,4);
              trans_mat_2 << 1, 0, 0, -1.2,
                0, 1, 0, 0,
                0, 0, 1, -1.865,
                0, 0, 0, 1;

        matrix_output = trans_mat_2 * matrix_output; 
        
        pcl::PointXYZINormal b;
        b.x = matrix_output(0,0);
        b.y = matrix_output(1,0);
        b.z = matrix_output(2,0);
        
        b.intensity = rawCld.points[j].intensity;
        b.normal_x = rawCld.points[j].normal_x;
        b.normal_y = rawCld.points[j].normal_y;
        b.normal_z = rawCld.points[j].normal_z;
        b.curvature = rawCld.points[j].curvature;

        resultCld.push_back(b);     
    }

  return resultCld;
}

  int main(int argc, char** argv)
  {
    pcl::PointCloud<pcl::PointXYZINormal>::Ptr inCloud(new pcl::PointCloud<pcl::PointXYZINormal>);
    pcl::PointCloud<pcl::PointXYZINormal>::Ptr rawCloud(new pcl::PointCloud<pcl::PointXYZINormal>);
    pcl::PointCloud<pcl::PointXYZINormal>::Ptr resultCloud(new pcl::PointCloud<pcl::PointXYZINormal>);
    
    /*point cloud map load*/
    
    if(pcl::io::loadPCDFile<pcl::PointXYZINormal>(argv[1], *inCloud)==-1)
    {
      PCL_ERROR("Couldn't read\n");
      return(-1);
    }

    std::cout << "Point cloud map read \n"; 
    std::cout << "first size :"<<inCloud->points.size() <<std::endl;

    /*point raw seperate*/  

    pcl::PassThrough<pcl::PointXYZINormal> pass;
    pass.setInputCloud(inCloud);

    double time_sec = 0.0;
    pcl::PointCloud<pcl::PointXYZINormal> midCloud;

    for (int i = 0;  inCloud->points.size() != 0; i++ )
      { 
        time_sec = inCloud->points[0].normal_z;
        pass.setInputCloud(inCloud);
        pass.setFilterFieldName("normal_z");
        pass.setFilterLimits(time_sec, time_sec);
        pass.setFilterLimitsNegative(false);
        pass.filter(*rawCloud); //raw point cloud      
        pass.setFilterLimitsNegative(true); //rest of point raw
        pass.filter(midCloud);

        std::cout << "time_sec: " << time_sec << std::endl;
        std::cout << rawCloud->size() << std::endl;
        *inCloud = midCloud;

        pcl::PointXYZINormal ndt = getNDTPose(*rawCloud); 
        std::cout << "x : " << ndt.x << " y : " << ndt.y <<  " z : " << ndt.z  <<  " intensity: " << ndt.intensity  <<  " nx : " << ndt.normal_x <<  " curva : " << ndt.curvature << std::endl;
        if(ndt.curvature ==0)
          { std::cout << "no ndt"<<std::endl;
            continue;
          }         

        Eigen::MatrixXf transform = getTransMat(ndt);
        
        *resultCloud = transformPoint(*rawCloud , transform);

        std::stringstream ss1; 
        ss1 << "_" << i << ".pcd";
        pcl::io::savePCDFile("/home/autoware/yuna/yuna_point/after_cor/" + ss1.str(), *resultCloud, false);
        std::cout << "result size :" << resultCloud->size() << std::endl;
        std::cout << i << "th file saving now ... " << "rest of in cloud size: " << inCloud->size() << std::endl;

        resultCloud -> clear();
        rawCloud ->clear();
        midCloud.clear();
        std::cout << "clear" << std::endl;
      }
      
  return 0;
  }
